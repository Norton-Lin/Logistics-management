#include "Interactive.h"
/*
* 交互类构造函数
* 数据库连接
*/
Interctive::Interctive()
{
	database = new Database();
	database->connectDatabase();
}
/*
* 交互类析构函数
* 释放数据库对象内存，断开数据库连接
*/
Interctive::~Interctive()
{
	database->FreeConnect();
	delete database;
	database = nullptr;
}
/*
* 注册函数，用户进行注册操作
*/
void Interctive::Register()
{
	User* user = new User();//建立用户类对象
	string username;
	string name;
	string number;
	string password;
	string address;
	int balance = 0;
	int n;
	cout << "请输入用户名：" << endl;
	cin >> username;
	while (this->checkUsername(username))//检查用户名是否存在
	{
		cout << "用户已存在，请重新输入" << endl;
		cout << "请输入用户名：" << endl;
		cin >> username;
	}
	cout << "请输入姓名：" << endl;
	cin >> name;
	cout << "请输联系电话：" << endl;
	cin >> number;
	while (!this->checkNumber(number))
	{
		cout << "电话号码不正确，请重新输入" << endl;
		cout << "请输入电话号码：" << endl;
		cin >> number;
	}
	cout << "请输入密码，密码长度为8~16位" << endl;
	cin >> password;
	while (!this->checkPaasword(password))
	{
		cout << "密码不合规范，请重新输入" << endl;
		cout << "请输入密码，密码长度为8~16位" << endl;
		cin >> password;
	}
	cout << "请输入联系地址：" << endl;
	cin >> address;
	cout << "请问是否进行充值？" << endl << "1.是\t" << "0.否" << endl;
	cin >> n;
	if (n == 1)
	{
		cout << "请输入充值数额:" << endl;
		cin >> balance;
	}
	user->registerAccount(username,name,number,password,address,balance);//注册用户
	user->saveUser();//保存用户信息
	if(database->connectDatabase())
	   database->insertUser(username);
	//database->FreeConnect();
	delete user;
	user = nullptr;
//	delete database;
	//database = nullptr;
}
/*
* 登录函数，用户进行登录操作
* 并进行后续操作
*/
void Interctive::Login()
{
	string username;
	string password;
	cout << "请输入用户名" << endl;
	cin >> username;
	cout << "请输入密码" << endl;
	cin >> password;
	User* user = new User(username, password);
	if (user->readUser())
	{
		cout << "登录成功！" << endl;
		int choice = 1;
		vector<Goods> goods;
		Goods good;
		user->setSend(database->findPackageByName(username, 1));//读取用户寄件信息
		user->setReceive(database->findPackageByName(username, 2));//读取用户收件信息
		vector<string> userList;
		vector<string> companyList;
		database->findUser(userList);//读取用户名列表
		database->findCompany(companyList);//读取物流公司列表
		while (choice >= 1 && choice <= 8)
		{
			cout << "请选择执行操作：" << endl
				<< "1.查询所有快递" << endl
				<< "2.查询指定快递" << endl
				<< "3.发送快递" << endl
				<< "4.账户充值" << endl
				<< "5.查询所有未签收快递" << endl
				<< "6.修改账户密码" << endl
				<< "7.查询账号信息" << endl
				<< "8.余额查询" <<endl
				<< "9.退出" << endl;
			cin >> choice;
			switch (choice)
			{
			case 1:
			{
				if (user->getSend().size() == 0)//寄件数量为0
					cout << "当前无已发送快递信息" << endl;
				else
				{
					cout << "已发送的快递如下：" << endl;
					user->printPacket(user->getSend());
				}
				if (user->getReceive().size() == 0)//收件数量为0
					cout << "当前无接受快递信息" << endl;
				else
				{
					cout << "已签收的快递如下：" << endl;
					user->printPacket(user->getReceive());
				}
				break;
			}
			case 2:
			{
				int choice1 = 0;
				cout << "请选择查询方式：" << endl
					<< "1. 根据快递单号进行查询" << endl
					<< "2. 根据快递时间进行查询" << endl
				    << "3. 根据用户进行查询" << endl;
				cin >> choice1;
				switch (choice1) {
				case 1:
				{
					string s;
					cout << "请输入快递单号" << endl;
					cin >> s;
					if (user->checkPacket(good, s, user->getSend()) || user->checkPacket(good, s, user->getReceive()))//从收寄件中查询
					{
						cout << "查询成功！" << endl;
						user->printPacket(good);
					}
					else
						cout << "查询失败" << endl;
					break;
				}
				case 2:
				{
					cout << "请输入查询时间（年.月.日）" << endl;
					array<int, 6> day = { 0 };
					cout << "请输入年：";
					cin >> day[0];
					cout << "请输入月：";
					cin >> day[1];
					cout << "请输入日：";
					cin >> day[2];
					goods.clear();//清空临时快递列表
					//查询该日期的收寄件
					if (user->checkPacket(goods, day, true, user->getSend()) || user->checkPacket(goods, day, false, user->getReceive()))
					{
						cout << "该日收发快递如下：" << endl;
						user->printPacket(goods);
					}
					else
						cout << "该日无快递收发记录" << endl;
					break;
				}
				case 3: 
				{
					cout << "请输入用户名：" << endl;
					cin >> username;
					goods.clear();//清空临时快递列表
					if (user->checkPacket(goods, username, false, user->getSend()))//查询该用户的的寄件
					{
						cout << "查询成功！" << endl;
						cout << "发送给该用户的快递如下：" << endl;
						user->printPacket(goods);
						goods.clear();
					}
					else
						cout << "无发送给该用户的快递" << endl;
					if (user->checkPacket(goods, username, true, user->getReceive()))//查询该用户的收件
					{
						cout << "查询成功！" << endl;
						cout << "来自于该用户的快递如下：" << endl;
						user->printPacket(goods);
					}
					else
						cout << "无来自于该用户的快递" << endl;
					break;
				}
				}
			}
			break;
			case 3:
				user->sendExpress(userList,companyList);//发送快递
				break;
			case 4:
			{
				int num;
				cout << "请输入充值金额" << endl;
				cin >> num;
				user->setBalance(user->getBalance() + num);//充值
				break;
			}
			case 5:
			{
				string s;
				int num = 0;
				bool judge = false;
				goods.clear();
				if (user->checkPacket(goods, State::Unsign, user->getReceive()))//查询未签收快递
				{
					cout << "未签收快递如下：" << endl;
					user->printPacket(goods);
					cout << "是否签收快递（1.是，2.否）" << endl;
					cin >> num;
					while (num == 1)//签收快递
					{
						Goods temp ;
						cout << "请输入待签收快递单号" << endl;
						cin >> s;
						for (auto i = goods.begin(); i != goods.end(); i++)
							if (i->getExpressNumber() == s)//找到对应快递
							{
								temp = *i;//找到对应快递
								temp.signExpress();
								goods.erase(i);
								judge = true;
								break;
							}
						if(judge)//签收成功，修改数据库内的状态
						for (int i = 0; i < user->getReceive().size(); i++)
						{
							if (user->getReceive()[i].getExpressNumber() == s)
							{
								user->setReceive(temp, i);
								database->updatetPackage(temp);
								break;
							}
						}
						else
							cout << "该快递不存在于待签收快递列表中";
						if (goods.size() > 0)//还有快递未签收
						{
							cout << "是否继续签收快递（1.是，2.否）" << endl;
							judge = false;
							cin >> num;
						}
						else
							break;
					}
				}
				else
					cout << "无未签收快递" << endl;
			}
			break;
			case 6:
				user->changeMessage();//修改账号信息
				break;
			case 7:
				user->printUser();//打印账号信息
				break;
			case 8:
				cout <<"当前余额： " << user->getBalance() << endl;//查询余额
				break;
			default:
				break;
			}
		}
		user->saveUser();//存储账号信息
	}
	delete user;//回收内存
	user = nullptr; //防止野指针
}

/*
* 管理员登录函数
*/
void Interctive::LoginManager()
{
	string username;
	string password;
	cout << "请输入用户名" << endl;
	cin >> username;
	cout << "请输入密码" << endl;
	cin >> password;
	Manager* manager = new Manager(username, password);
//	Database* database = new Database();
	vector<User> user;//用户信息列表
	vector<string> userList;
	vector<Goods> goods;
	Goods good;
	if (database->findManger(*manager))//查询管理员信息并连接数据库
	{
		cout << "登录成功！" << endl;
		int choice = 1;
		manager->setPacket(database->findPackageByName(manager->getCompany(), 3));//获取管理员名下所有快递
		database->findUser(userList);
		manager->readAllUserName(userList);//获取用户名列表
		for (auto s : userList)
			user.emplace_back(manager->readUser(s));
		while (choice >= 1 && choice <= 4)
		{
			cout << "请选择执行操作：" << endl
				<< "1.查询所有快递信息" << endl
				<< "2.查询所有用户信息" << endl
				<< "3.查询账户余额" << endl
				<< "4.查询指定快递信息" << endl
				<< "5.退出" << endl;
			cin >> choice;
				switch (choice)
				{
				case 1:
					manager->printPacket(manager->getPacket());//查询所有快递信息
					if (manager->getPacket().size() == 0)
						cout << "当前无快递信息" << endl;
					break;
				case 2:
					for (auto s : user)//输出所有用户信息
						s.printUser();
					if (user.size() == 0)
						cout << "当前无用户信息" << endl;
					break;
				case 3:
					cout << manager->getBalance() << endl;//查询余额
					break;
				case 4: {
					int choice1 = 0;
					cout << "请选择查询方式：" << endl
						<< "1. 根据用户进行查询" << endl
						<< "2. 根据快递单号进行查询" << endl
						<< "3. 根据快递时间进行查询" << endl;
					cin >> choice1;
					switch (choice1)
					{
					case 1:
						cout << "请输入用户名：" << endl;
						cin >> username;
						goods.clear();
						if (manager->checkPacket(goods, username, true, manager->getPacket()))
						{
							cout << "查询成功！" << endl;
							cout << "该用户所发送快递如下：" << endl;
							manager->printPacket(goods);
							goods.clear();
						}
						else
							cout << "该用户无寄件记录" << endl;
						if (manager->checkPacket(goods, username, false, manager->getPacket()))
							{
								cout << "查询成功！" << endl;
									cout << "该用户所接收快递如下：" << endl;
								manager->printPacket(goods);
							}
						else
							cout << "该用户无收件记录" << endl;
						break;
					case 2:
						cout << "请输入快递单号:" << endl;
						cin >> username;
						if (manager->checkPacket(good, username, manager->getPacket()))
						{
							cout << "查询成功！" << endl;
							manager->printPacket(good);
						}
						else
							cout << "查询失败" << endl;
						break;
					case 3:
					{
						cout << "请输入查询时间（年.月.日）" << endl;
						array<int, 6> day = { 0 };
						cout << "请输入年：";
						cin >> day[0];
						cout << "请输入月：";
						cin >> day[1];
						cout << "请输入日：";
						cin >> day[2];
						goods.clear();
						if (manager->checkPacket(goods, day, true, manager->getPacket()))
						{
							cout << "该日所有快递记录如下：" << endl;
							manager->printPacket(goods);
						}
						else
							cout << "该日无快递收发记录" << endl;
						break;
					}
					}
				}
					break;
				default :
					break;
			    }
		}
	}
//	database->FreeConnect();
	delete manager;
	manager = nullptr;
//	delete database;
//	database = nullptr;
}
/*
* 查验账号用户名是否重复,返回false说明不重复
*/
bool Interctive::checkUsername(string username)
{
	bool result = true;
	fstream fcheck;//文件输出流
	fcheck.open(username + ".txt");
	if (!fcheck)//不存在同名账号
		result = false;
	return result;
}
/*
*检查电话号码位数是否正确,电话号码需为11位
*/
bool Interctive::checkNumber(string number)
{
	bool result = false;
	if (number.length() == 11)
		result = true;
	return result;
}
/*
* 检查密码是否符合规范，密码长度为8~16位
*/
bool Interctive::checkPaasword(string password)
{
	bool result = false;
	if (password.length()>= 8&&password.length() <= 16)
		result = true;
	return result;
}

